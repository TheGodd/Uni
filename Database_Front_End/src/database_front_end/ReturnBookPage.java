/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package database_front_end;

import com.mongodb.BasicDBObject;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBCursor;
import com.mongodb.MongoClient;
import java.awt.event.ItemEvent;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
/**
 *
 * @author golde
 */
public class ReturnBookPage extends javax.swing.JFrame {

    /**
     * Creates new form ReturnBookPage
     */
    boolean optionSelected = false;
    //creates boolean optionSelected
    boolean initialised = false;
    //creates boolean initialised
    int diff;
    //creates int diff
    
    MongoClient mongoClient = new MongoClient("192.168.1.11", 27017);
    //defines the ipaddress and port to use to connect
    DB db = mongoClient.getDB("Library");
    //defines the database to use
    DBCollection collection = db.getCollection("Orders");
    //defines the collection to use
    
    public ReturnBookPage() {
        initComponents();
        comboPopulation();
        //calls the class that creates the form then the one that populates the comboboxes
    }
    public void setMoneyOwed(String date){
        try{
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("d/MM/yyyy");
        //creates a format for the date to be layed out

        LocalDate today = LocalDate.now();
        LocalDate dateDue = LocalDate.parse(date, formatter);
        //creates two localdate variables, sets today to the current date 
        //and sets date due to the date passed from one of tw oclasses
        
        diff = dateDue.until(today).getDays();
        //sets diff to the difference between today and the date due
        
        lblMoneyOwed.setText("You Owe: Â£" + diff);
        
        }
        catch(Exception e){
        System.out.println(e);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        memberName = new javax.swing.JComboBox<>();
        bookName = new javax.swing.JComboBox<>();
        dateReturned = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        btnReturnBook = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        lblMoneyOwed = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        memberName.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                memberNameItemStateChanged(evt);
            }
        });

        bookName.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                bookNameItemStateChanged(evt);
            }
        });

        jLabel1.setText("Member Name");

        jLabel2.setText("Book Name");

        jLabel3.setText("Date Returned");

        btnReturnBook.setText("Return Book");
        btnReturnBook.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnReturnBookMouseClicked(evt);
            }
        });

        btnReset.setText("Reset");
        btnReset.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnResetMouseClicked(evt);
            }
        });

        lblMoneyOwed.setFont(new java.awt.Font("sansserif", 0, 24)); // NOI18N
        lblMoneyOwed.setText("You Owe:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel3))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(memberName, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(bookName, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(dateReturned, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(lblMoneyOwed, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addComponent(btnReturnBook)
                        .addGap(51, 51, 51)
                        .addComponent(btnReset)))
                .addContainerGap(91, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(memberName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bookName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dateReturned, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(16, 16, 16)
                .addComponent(lblMoneyOwed)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnReturnBook)
                    .addComponent(btnReset))
                .addContainerGap(54, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnReturnBookMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnReturnBookMouseClicked

        try{
        String selectedBookName = (String) bookName.getSelectedItem();
        //creates and sets the string selectedBookName to the option selected in the bookName combo box
        String selectedMemberName = (String) memberName.getSelectedItem();
        //creates and sets string selectedMemberName to the selected item in the memberName combobox
        String returnDate = dateReturned.getText();
        //creates and sets String returnDate to the value of the dateReturned text box
        
        ReturnBook returnbook = new ReturnBook();
        returnbook.returnBook(selectedBookName, selectedMemberName, returnDate, diff);
        //calls the recurn book method in the return book class passing through selectedBookName, selectedMemberName, returnDate, diff
        }
        catch(Exception e){
        System.out.println(e);
        }
    }//GEN-LAST:event_btnReturnBookMouseClicked

    private void memberNameItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_memberNameItemStateChanged
        // TODO add your handling code here:
        try{
        if (evt.getStateChange() == ItemEvent.SELECTED && optionSelected == false && initialised == true) {
        //Do any operations you need to do when an item is selected.

            DBCursor cursMemName = collection.find(
            new BasicDBObject(), new BasicDBObject("MemberName", Boolean.TRUE)
            );
            //uses a cursor to search the collection for all values in the MemberName field
            DBCursor cursBookName = collection.find(
            new BasicDBObject(), new BasicDBObject("BookName", Boolean.TRUE)
            );
            //uses a cursor to search the collection for all values in the BookName field
            DBCursor cursDateDue = collection.find(
            new BasicDBObject(), new BasicDBObject("DateDue", Boolean.TRUE)
            );
            //uses a cursor to search the collection for all values in the DateDue field
            String memNameCombo = (String)evt.getItem();
            //creates string memNameCombo and sets it equal to the selected item in the memName combo box
            String date;
            //creates string date
            
            while (cursMemName.hasNext()) {
            //while cursMemName has the next value in the database do this
            
                String memNameField = cursMemName.next().get("MemberName").toString();
                //creates string memNameField and make it equal to the current value in the MemberName field
                String bookNameField = cursBookName.next().get("BookName").toString();
                //creates string bookNameField and makes it equal to the current value in the Bookname field
                date = cursDateDue.next().get("DateDue").toString();
                //sets date equal to the current value of DueDate field
            
                if(memNameCombo.equals(memNameField) && optionSelected == false){
                //if the memNameCombo is equal to the memNameField and optionSelected is false then to this
                    optionSelected = true;
                    //set optionSelected to true
                    bookName.removeAllItems();
                    //remove all options from the book name combobox
                    bookName.addItem(bookNameField);
                    //add the value of bookNameField to the book name combobox
                    memberName.removeAllItems();
                    //remove all options from the member name combo box
                    memberName.addItem(memNameCombo);
                    //add the value of memNameCombo to the member name combo box
                    setMoneyOwed(date);
                    //call setMoneyOwed passing it date
                        
                }else if(memNameCombo.equals(memNameField)){
                //otherwise if memNameCombo is equal to memNameField do this
                    bookName.addItem(bookNameField);
                    //add the value of bookNameField to the book name combo box
                    setMoneyOwed(date);
                    //call setMoneyOwed passing it date
                }
            }
            
            
        }
        }
        catch(Exception e){
            System.out.println(e);
        }
        
    }//GEN-LAST:event_memberNameItemStateChanged

    private void bookNameItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_bookNameItemStateChanged

        try{
        if (evt.getStateChange() == ItemEvent.SELECTED && initialised == true && optionSelected == false) {
        //Do any operations you need to do when an item is selected.
            optionSelected = true;

            DBCursor cursMemName = collection.find(
            new BasicDBObject(), new BasicDBObject("MemberName", Boolean.TRUE)
            );
            //uses a cursor to search the collection for all values in the MemberName field
            DBCursor cursBookName = collection.find(
            new BasicDBObject(), new BasicDBObject("BookName", Boolean.TRUE)
            );
            //uses a cursor to search the collection for all values in the BookName field
            DBCursor cursDateDue = collection.find(
            new BasicDBObject(), new BasicDBObject("DateDue", Boolean.TRUE)
            );
            //uses a cursor to search the collection for all values in the BookName field
            String bookNameCombo = (String)evt.getItem();
            //creates string bookNameCombo and sets it equal to the selected item in the bookName combo box
            String date;
            //creates string date
            
            bookName.removeAllItems();
            //removes all items from the book name combo box
            bookName.addItem(bookNameCombo);
            //adds the value of bookNameCombo to the book name combo box
            
            while (cursBookName.hasNext()) {
            //while cursBookName has the next value in the database do this
                String bookNameField = cursBookName.next().get("BookName").toString();
                //creates String bookNameField and makes it equal to the value of the field BookName
                String memNameField = cursMemName.next().get("MemberName").toString();
                //creates String memNameField and makes it equal to the value of the field MemeberName
                date = cursDateDue.next().get("DateDue").toString();
                //sets date equal to the due date field
            
                if(bookNameField.equals(bookNameCombo)){
                //if the bookNameField is equal to the bookNameCombo then do
                    memberName.removeAllItems();
                    //Removes all items form the memberName field
                    memberName.addItem(memNameField );
                    //adds the value memNameField to the memberName combo box
                    setMoneyOwed(date);
                    //calls method setMoneyOwed and passes it date
                }
            }
            
        }
        }
        catch(Exception e){
        System.out.println(e);
        }
    }//GEN-LAST:event_bookNameItemStateChanged

    private void btnResetMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnResetMouseClicked
        // TODO add your handling code here:
        memberName.removeAllItems();
        bookName.removeAllItems();
        //removes all items from both memberName combo box and bookName combo box
        comboPopulation();
        //calls comboPopulation method
        
    }//GEN-LAST:event_btnResetMouseClicked

    private void comboPopulation(){
        try{
        initialised = false;
        //sets initialised equal to false
        memberName.addItem("Choose a member");
        bookName.addItem("Choose a book");
        //adds "Choose a member" to memberName combo box and "choose a book" to bookName combo box
        
        DBCursor cursMemName = collection.find(
        new BasicDBObject(), new BasicDBObject("MemberName", Boolean.TRUE)
         ); 
        //uses a cursor to search the collection for all values in the MemberName field
        
        DBCursor cursBookName = collection.find(
        new BasicDBObject(), new BasicDBObject("BookName", Boolean.TRUE)
         );
        //uses a cursor to search the collection for all values in the BookName field
        
        collection = db.getCollection("Invoices");
        //defines the collection to use
        DBCursor cursPaid = collection.find(
        new BasicDBObject(), new BasicDBObject("PaidDate", Boolean.TRUE)
         );
        //uses a cursor to search the collection for all values in the PaidDate field
        
        ArrayList<String> memList = new ArrayList<String>();
        //creates a string array list called memList
        while (cursMemName.hasNext()) {
            String paid = (String) cursPaid.next().get("PaidDate");
            //creates String paid and makes it equal to the field PaidDate
            String memNameField = (String) cursMemName.next().get("MemberName");
            //creates String memNameField and makes it equal to the field MemberName
            String bookNameField = (String) cursBookName.next().get("BookName");
            //creates String bookNameField and makes it equal to the field BookName
            
            if(paid.equals("")){
            //if paid is empty then
            Boolean moreThanOne = false;
            //make boolean moreThanOne equal to false
            for(int i=0; i < memList.size(); i++){
            //loop that creates and int i then if i is less than the size of the
            //arraylist then it runs the code and adds 1 to i
                if(memList.get(i).equals(memNameField)){
                    //if memList position i is equal to the memName Field then run this
                    moreThanOne = true;
                    //make moreThanOne equal to true
                }
            }
            if(moreThanOne == false){
                //if moreThanOne is false then
                memberName.addItem(memNameField);
                //add memNameField to the memberName combo box
                memList.add(memNameField);
                //add memNameField to the memList arrayList
            }
            
            bookName.addItem(bookNameField);
            //add bookNameField to bookName combo Box

        initialised = true;
        //set initialised equal to true
        optionSelected = false;
        //set optionSelected equal to false
            }
        }
        collection = db.getCollection("Orders");
        }
        catch(Exception e){
        System.out.println(e);
        }
    }
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ReturnBookPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ReturnBookPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ReturnBookPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ReturnBookPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ReturnBookPage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> bookName;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnReturnBook;
    private javax.swing.JTextField dateReturned;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel lblMoneyOwed;
    private javax.swing.JComboBox<String> memberName;
    // End of variables declaration//GEN-END:variables
}